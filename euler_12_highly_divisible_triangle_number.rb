# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def factors_of(integer)
  (1..Math.sqrt(integer)).select { |n| (integer % n).zero? }
  # dirty hack we just divide target by 2 and hope for the best
end

def triangle_number(integer)
  (integer * (integer + 1)) / 2
end

def count_triangle_factors(factors)
  integer = 1
  until factors_of(triangle_number(integer)).count > factors/2 do integer += 1 end
  triangle_number(integer)
end

puts count_triangle_factors(500)
