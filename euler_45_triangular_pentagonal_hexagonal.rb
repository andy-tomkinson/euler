=begin

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

=end

def pentagonal_term(n)
    (n * ((3 * n) - 1))/2
end

def triangular_term(n)
    (n * (n + 1))/2
end

def hexagonal_term(n)
    n * ((2 * n) - 1)
end

def check_pentagonal(p)
    quadratic(3, -1, (-2 * p))
end

def check_triangular(t)
    quadratic(1, 1, (-2 * t))
end

def check_hexagonal(h)
    quadratic(2, -1, (-h))
end

def quadratic(a, b, c)
    (-b + Math.sqrt((b ** 2) - (4 * (a * c))))/(2 * a)
end

def is_pentagonal?(p)
    result = check_pentagonal(p)
    result % 1 == 0 ? result : false
end

def is_hexagonal?(p)
    result = check_hexagonal(p)
    result % 1 == 0 ? result : false
end

def create_array_of_pents(max)
    array = []
    (1..max).to_a.each do |i|
        array << pentagonal_term(i)
    end
    array
end

def both_pentagonal?(a, b, array)
    a_val = array[a - 1]
    b_val = array[b - 1]
    is_pentagonal?(a_val + b_val) && is_pentagonal?((b_val - a_val).abs)
end

def find_answer(max)
    pents = create_array_of_pents(max)
    tries = 0
    max_diff = max - 1
    (1..max_diff).to_a.each do |difference|
        (1..max - difference).to_a.each do |first_index|
            tries += 1
            if both_pentagonal?(first_index, first_index + difference, pents)
                puts "#{pents[first_index - 1]}, #{pents[first_index + difference - 1]}"
                puts "Answer is #{pents[first_index + difference - 1] - pents[first_index - 1]}"
                break
            end
        end
    end
    puts "Made #{tries} comparisons"
end

def pent_and_hex?(n)
    is_pentagonal?(n) && is_hexagonal?(n)
end

def solve
    success = false
    value = 285
    until success do
        value += 1
        success = true if pent_and_hex?(triangular_term(value))
    end
    puts value
    puts triangular_term(value)
end

solve